<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAEBAAAAEAIABoBAAAJgAAACAgAAABACAAqBAAAI4EAAAoAAAAEAAAACAAAAABACAAAAAAADAE
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhY
        WB1aWlpEWFhYMYCAgAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgICAAltb
        W4dbW1v8W1tb2FtbW/9bW1u+WFhYGgAAAAAAAAAAWlpaH1xcXIhbW1vUWlpa+FtbW/BbW1vCXFxcUFtb
        W3BbW1v/W1tb/1paWlVbW1v/W1tb/1xcXMCAgIACW1tbO1tbW/FbW1v/W1tb/1xcXCdYWFgxW1tb/1xc
        XG9bW1vWW1tb/1tbW/9aWlpVW1tb/1tbW/9bW1v/WlpaNltbW81bW1v/W1tb/1tbW/9cXFxyXFxccltb
        W/9aWlpbW1tb8VpaWlhaWlpEWVlZF1paWkRaWlpEW1tb1llZWU1bW1v7W1tb/1tbW/9bW1v/WlpaoVpa
        WqFbW1v/W1tbg1tbW8FbW1v/W1tb/1paWlVbW1v/W1tb/1tbW/xYWFggXFxc3FtbW/9bW1v/W1tb/1tb
        W8hbW1vIW1tb/1xcXOpaWlpKW1tb+1tbW/9cXFxnW1tb/1tbW/9bW1uHAAAAAF5eXhtbW1tRWlpaVVpa
        WlVaWlpVWlpaVVpaWlVaWlpVXl5eJlpaWjZbW1u8W1tb6VxcXM5bW1tqAAAAAQAAAAAAAAAAAAAAAAAA
        AABmZmYFXFxcMlxcXDJmZmYFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABbW1s4W1tb3ltbW/9bW1v/W1tb3VpaWjYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABVVVUJW1tb4ltbW/9bW1v/W1tb/1tbW/9bW1vgYGBgCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAXFxcPVtbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbWzsAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAFlZWTxbW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1s7AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABVVVUJW1tb4ltbW/9bW1v/W1tb/1tbW/9bW1vgYGBgCAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFlZWTlbW1vkW1tb/1tbW/9bW1vjXV1dNwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVVVVDFtbWzhbW1s4VVVVDAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD/gwAAwZEAAI0RAAANfQAAABEAAACRAAD/xwAA//8AAOH/
        AADA/wAAwP8AAMD/AADA/wAA4f8AAP//AAAoAAAAIAAAAEAAAAABACAAAAAAAIAQAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhYWBpaWlpmXFxcllxcXKdbW1uKW1tbTGBg
        YAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBgYAhbW1uSW1tb+VtbW/9bW1v/W1tb/1tb
        W/9bW1v/W1tb41tbW1cAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABVVVUMW1tbxVtbW/9bW1v/W1tb/1tb
        W99aWlp0W1tb/1tbW/9bW1v/W1tb/ltbW3kAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVVVVDFpa
        WlhbW1uiW1tb1FtbW/JbW1v/W1tb9VtbW9pcXFy1WlpadFhYWCAAAAAAAAAAAFtbW6tbW1v/W1tb/1tb
        W/9bW1v/XFxcqgAAAABbW1v/W1tb/1tbW/9bW1v/W1tb/lxcXFMAAAAAAAAAAAAAAAAAAAAAYGBgCFtb
        W4NbW1vwW1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/VlZWTlZWVk/W1tb/1tb
        W/9bW1v/W1tb/1tbW/9cXFyqAAAAAFtbW/9bW1v/W1tb/1tbW/9bW1v/W1tb4FVVVQYAAAAAAAAAAF5e
        XhtbW1vNW1tb/1tbW/9bW1v/W1tb/1tbW/9dXV00AAAAAGBgYBBcXFxQW1tb/1tbW/9bW1vxSUlJB1pa
        WqFbW1v/W1tb/1tbW/9bW1v/W1tb/1xcXKoAAAAAW1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/WlpaSgAA
        AABJSUkHW1tbyVtbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1xcXHIAAAAAAAAAAFpaWnFbW1v/W1tb/1tb
        W8gAAAAAW1tb4ltbW/9bW1v/W1tb/1tbW/9bW1v/XFxcqgAAAABbW1v/W1tb/1tbW/9bW1v/W1tb/1tb
        W/9cXFyLAAAAAFxcXGdbW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tbvgAAAAAAAAAAW1tbvltb
        W/9bW1v/W1tbsQAAAABaWlr4W1tb/1paWiIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABbW1t4W1tb/1tbW6IAAAAAW1tbxltbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v6YGBgEGBg
        YBBbW1v6W1tb/1tbW/9bW1u+AAAAAFtbW+tbW1v/W1tbxVxcXKpcXFyqXFxcqlxcXHIAAAAAXFxcqlxc
        XKpcXFyqXFxcqltbW+JbW1v/W1tblQAAAABbW1vvW1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tb
        W/9bW1tXWlpaWFtbW/9bW1v/W1tb/1tbW+EAAAAAW1tbvltbW/9bW1v/W1tb/1tbW/9bW1v/XFxcqgAA
        AABbW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9cXFxnAAAAAFtbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tb
        W/9bW1v/W1tb/lpaWjNdXV00W1tb/ltbW/9bW1v/W1tb/1lZWStaWlpmW1tb/1tbW/9bW1v/W1tb/1tb
        W/9cXFyqAAAAAFtbW/9bW1v/W1tb/1tbW/9bW1v/W1tb91lZWRcAAAAAW1tb6VtbW/9bW1v/W1tb/1tb
        W/9bW1v/W1tb/1tbW/9bW1vMWlpaRFpaWkRbW1vMW1tb/1tbW/9bW1v/W1tbl1VVVQZcXFzcW1tb/1tb
        W/9bW1v/W1tb/1xcXKoAAAAAW1tb/1tbW/9bW1v/W1tb/1tbW/9bW1uKAAAAAAAAAABbW1uEW1tb/1tb
        W/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v7WlpaM1xc
        XC9bW1vyW1tb/1tbW/9bW1v/W1tbxF1dXSlbW1v/W1tb/1tbW/9bW1v/W1tbwklJSQcAAAAAAAAAAAAA
        AAFaWlpgWlpar1tbW7tbW1u7W1tbu1tbW7tbW1u7W1tbu1tbW7tbW1u7W1tbu1tbW7tbW1u7W1tbu1tb
        W7tbW1uaAAAAAVpaWjBbW1vfW1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1paWqxdXV0LAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBgYAhbW1tqW1tbu1tbW+RbW1vuW1tb21paWqFdXV1CAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        f//wAP//8AD///AA///4Af///AP///8P////////
</value>
  </data>
</root>